// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozonva/ova-track-api/internal/kafka_client (interfaces: IKafkaClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIKafkaClient is a mock of IKafkaClient interface.
type MockIKafkaClient struct {
	ctrl     *gomock.Controller
	recorder *MockIKafkaClientMockRecorder
}

// MockIKafkaClientMockRecorder is the mock recorder for MockIKafkaClient.
type MockIKafkaClientMockRecorder struct {
	mock *MockIKafkaClient
}

// NewMockIKafkaClient creates a new mock instance.
func NewMockIKafkaClient(ctrl *gomock.Controller) *MockIKafkaClient {
	mock := &MockIKafkaClient{ctrl: ctrl}
	mock.recorder = &MockIKafkaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKafkaClient) EXPECT() *MockIKafkaClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockIKafkaClient) Connect(arg0 context.Context, arg1, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockIKafkaClientMockRecorder) Connect(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIKafkaClient)(nil).Connect), arg0, arg1, arg2, arg3)
}

// SendMessage mocks base method.
func (m *MockIKafkaClient) SendMessage(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIKafkaClientMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIKafkaClient)(nil).SendMessage), arg0)
}
